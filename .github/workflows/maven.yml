name: Java CI with Maven, SonarQube, and Docker

on:
  push:
    branches: [ "main" , "develop","develop2"]
  pull_request:
    branches: [ "main" , "develop" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - name: Check out the code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Build with Maven
        run: mvn -B package --file pom.xml

      - name: Run SonarQube
        run: mvn clean verify sonar:sonar -Dsonar.projectKey=${{secrets.SONAR_KEY}} -Dsonar.projectName=${{secrets.SONAR_NAME}} -Dsonar.host.url=${{secrets.SONAR_HOST}} -Dsonar.token=${{secrets.SONAR_TOKEN}}

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | sudo docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker image with Docker compose
        run : sudo docker-compose build

      - name: Push Docker image to Docker Hub
        run: |
          sudo docker-compose push

      - name: Copy files to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_IP }}
          username: ${{ secrets.SSH_ID }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "."
          target: "/home/nhnacademy/gateway"

      - name: Stop existing containers on port 8080
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_IP }}
          username: ${{ secrets.SSH_ID }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            ports_to_check=("8080")
            for port in "${ports_to_check[@]}"; do
  # Find container IDs using Docker command instead of lsof
              existing_containers=$(docker ps --filter "publish=$port" -q)
              for container in $existing_containers; do
                sudo docker stop $container
                sudo docker rm $container
              done
            done

      - name: Deploy to server via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_IP }}
          username: ${{ secrets.SSH_ID }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            cd /home/nhnacademy/gateway
            sudo docker-compose pull
            sudo docker-compose down || true
            sudo docker-compose up -d